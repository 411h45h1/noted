{"version":3,"sources":["context/appContext.js","components/app/LabelButtons.js","firebase.js","api/notes.js","components/app/NoteItem.js","components/MainEvent.js","core/utils.js","api/auth.js","components/reusable/Input.js","core/coldStore.js","components/onboard/Login.js","components/onboard/Register.js","components/OnBoard.js","App.js","serviceWorker.js","context/appReducer.js","context/AppState.js","index.js"],"names":["AppContext","createContext","LabelButtons","onLogout","useContext","Grid","Column","floated","width","Label","Group","as","color","content","href","target","rel","onClick","icon","window","close","firebase","length","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","getNotes","uid","a","collection","get","notes","docs","map","doc","nid","id","data","addNote","title","importance","add","Date","now","date","moment","format","req","NoteItem","Segment","className","inverted","style","maxHeight","overflowY","backgroundColor","i","k","raised","key","attached","size","Card","header","description","marginTop","marginBottom","MainEvent","useState","setTitle","setContent","radioValue","setRadioValue","state","loadNotes","handleSubmit","then","Form","Input","label","value","placeholder","onChange","e","inline","Radio","checked","TextArea","Button","emailValidator","email","test","passwordValidator","password","nameValidator","name","signInUser","auth","createUserWithEmailAndPassword","cred","user","set","currentUser","updateProfile","displayName","code","error","loginUser","signInWithEmailAndPassword","errorText","props","ColdStorage","require","default","getStorage","type","setStorage","history","createBrowserHistory","basename","location","pathname","Login","setEmail","setPassword","loading","setLoading","setError","useEffect","handleLogin","emailError","passwordError","catch","err","push","Header","Row","mode","Register","setName","handleSignUp","nameError","response","OnBoard","toggleLogin","setToggleLogin","toggleRegister","setToggleRegister","toggle","active","App","loggedIn","exact","path","to","component","Boolean","hostname","match","payload","notesLoaded","AppState","useReducer","appReducer","dispatch","res","sort","b","onNotes","useCallback","authCheck","onAuthStateChanged","username","Provider","signOut","children","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8618eee4.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst AppContext = createContext();\r\n\r\nexport default AppContext;\r\n","import React, { useContext } from \"react\";\r\nimport { Grid, Label } from \"semantic-ui-react\";\r\nimport AppContext from \"../../context/appContext\";\r\n\r\nconst LabelButtons = () => {\r\n  const state = useContext(AppContext);\r\n  const { onLogout } = state;\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Grid.Column floated=\"right\" width={6}>\r\n          <Label.Group>\r\n            <Label\r\n              as={\"a\"}\r\n              color=\"black\"\r\n              content=\"Click here for the repository\"\r\n              href=\"https://github.com/AhmedAlihashi/noted\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            />\r\n            <Label\r\n              as={\"a\"}\r\n              color=\"grey\"\r\n              content=\"Log Out\"\r\n              onClick={() => onLogout()}\r\n            />\r\n            <Label\r\n              as={\"a\"}\r\n              icon=\"power off\"\r\n              color=\"red\"\r\n              onClick={() => {\r\n                window.close();\r\n              }}\r\n            />\r\n          </Label.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LabelButtons;\r\n","import * as firebase from \"firebase\";\n\nconst config = {\n  apiKey: \"AIzaSyAyICImbLgzOPfjatWrhb5M0bo8fxh4nuQ\",\n  authDomain: \"noted-55f73.firebaseapp.com\",\n  databaseURL: \"https://noted-55f73.firebaseio.com\",\n  projectId: \"noted-55f73\",\n  storageBucket: \"noted-55f73.appspot.com\",\n  messagingSenderId: \"405755323077\",\n  appId: \"1:405755323077:web:9d4e464807654c4c37c6ac\",\n  measurementId: \"G-YXMJP7FPBP\",\n};\n\nexport default !firebase.apps.length\n  ? firebase.initializeApp(config)\n  : firebase.app();\n","import firebase from \"../firebase\";\r\nimport \"firebase/firestore\";\r\nimport moment from \"moment\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport const getNotes = async (uid) => {\r\n  const collection = db.collection(`User Notes: ${uid}`);\r\n\r\n  const notes = await collection.get();\r\n  return notes.docs.map((doc) => {\r\n    return { nid: doc.id, ...doc.data() };\r\n  });\r\n};\r\n\r\nexport const addNote = async (uid, title, content, importance) => {\r\n  const collection = db.collection(`User Notes: ${uid}`);\r\n\r\n  const req = await collection.add({\r\n    nid: Date.now(),\r\n    title,\r\n    content,\r\n    importance,\r\n    date: moment().format(\"llll\"),\r\n  });\r\n\r\n  return req;\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Segment, Card, Label } from \"semantic-ui-react\";\r\nimport AppContext from \"../../context/appContext\";\r\n\r\nconst NoteItem = () => {\r\n  const state = useContext(AppContext);\r\n  const { notes } = state;\r\n\r\n  return (\r\n    <Segment\r\n      className=\"NoteInput\"\r\n      inverted\r\n      style={{\r\n        width: \"100%\",\r\n        maxHeight: \"65vh\",\r\n        overflowY: \"scroll\",\r\n        backgroundColor: \"#FDD543\",\r\n      }}\r\n    >\r\n      {notes.map((i, k) => {\r\n        return (\r\n          <Segment\r\n            raised\r\n            key={k}\r\n            style={{\r\n              backgroundColor: \"#C9BF77\",\r\n            }}\r\n          >\r\n            <Label\r\n              color={\r\n                i.importance === \"Lv.1\"\r\n                  ? \"grey\"\r\n                  : i.importance === \"Lv.2\"\r\n                  ? \"blue\"\r\n                  : i.importance === \"Lv.3\"\r\n                  ? \"orange\"\r\n                  : i.importance === \"Lv.4\"\r\n                  ? \"red\"\r\n                  : null\r\n              }\r\n              attached=\"top right\"\r\n              content={i.importance}\r\n            />\r\n            <Label\r\n              size=\"tiny\"\r\n              color=\"black\"\r\n              attached=\"bottom left\"\r\n              content={i.date}\r\n            />\r\n\r\n            <Card\r\n              header={i.title}\r\n              description={i.content}\r\n              style={{\r\n                marginTop: 20,\r\n                marginBottom: 20,\r\n                backgroundColor: \"#F2F2EF\",\r\n              }}\r\n            />\r\n          </Segment>\r\n        );\r\n      })}\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default NoteItem;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Grid, Segment, Form } from \"semantic-ui-react\";\r\nimport { addNote } from \"../api/notes\";\r\nimport AppContext from \"../context/appContext\";\r\nimport NoteItem from \"./app/NoteItem\";\r\n\r\nconst MainEvent = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [radioValue, setRadioValue] = useState(null);\r\n  const state = useContext(AppContext);\r\n  const { uid, loadNotes, notes } = state;\r\n\r\n  let importance = radioValue;\r\n\r\n  const handleSubmit = async () =>\r\n    await addNote(uid, title, content, importance).then(() => loadNotes());\r\n\r\n  return (\r\n    <div>\r\n      <Grid>\r\n        <p id=\"title\">Noted</p>\r\n      </Grid>\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          <Segment raised style={{ backgroundColor: \"#DDBA3B\" }}>\r\n            <Form>\r\n              <Form.Input\r\n                label=\"Title\"\r\n                value={title}\r\n                placeholder=\"Title\"\r\n                onChange={(e, { value }) => setTitle(value)}\r\n              />\r\n              <Form.Group inline>\r\n                <label>Level of importance</label>\r\n                <Form.Radio\r\n                  label=\"Lv.1\"\r\n                  value=\"Lv.1\"\r\n                  checked={radioValue === \"Lv.1\"}\r\n                  onChange={(e, { value }) => setRadioValue(value)}\r\n                />\r\n                <Form.Radio\r\n                  label=\"Lv.2\"\r\n                  value=\"Lv.2\"\r\n                  checked={radioValue === \"Lv.2\"}\r\n                  onChange={(e, { value }) => setRadioValue(value)}\r\n                />\r\n                <Form.Radio\r\n                  label=\"Lv.3\"\r\n                  value=\"Lv.3\"\r\n                  checked={radioValue === \"Lv.3\"}\r\n                  onChange={(e, { value }) => setRadioValue(value)}\r\n                />\r\n                <Form.Radio\r\n                  label=\"Lv.4\"\r\n                  value=\"Lv.4\"\r\n                  checked={radioValue === \"Lv.4\"}\r\n                  onChange={(e, { value }) => setRadioValue(value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.TextArea\r\n                label=\"Content\"\r\n                value={content}\r\n                placeholder=\"Enter note data here\"\r\n                onChange={(e, { value }) => setContent(value)}\r\n              />\r\n              <Form.Button color=\"black\" onClick={() => handleSubmit()}>\r\n                Submit\r\n              </Form.Button>\r\n            </Form>\r\n          </Segment>\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>{notes && <NoteItem />}</Grid.Column>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainEvent;\r\n","export const emailValidator = email => {\n  const re = /\\S+@\\S+\\.\\S+/;\n\n  if (!email || email.length <= 0) return \"Email cannot be empty.\";\n  if (!re.test(email)) return \"Ooops! We need a valid email address.\";\n\n  return \"\";\n};\n\nexport const passwordValidator = password => {\n  if (!password || password.length <= 0) return \"Password cannot be empty.\";\n\n  return \"\";\n};\n\nexport const nameValidator = name => {\n  if (!name || name.length <= 0) return \"Name cannot be empty.\";\n\n  return \"\";\n};\n","import firebase from \"../firebase\";\nimport \"firebase/auth\";\n\nexport const logoutUser = () => {\n  firebase.auth().signOut();\n};\n\nexport const signInUser = async ({ name, email, password }) => {\n  try {\n    await firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then((cred) =>\n        firebase.firestore().collection(\"users\").doc(cred.user.uid).set({\n          name: name,\n          email: email,\n        })\n      );\n\n    firebase.auth().currentUser.updateProfile({\n      displayName: name,\n    });\n\n    return {};\n  } catch (error) {\n    switch (error.code) {\n      case \"auth/email-already-in-use\":\n        return {\n          error: \"E-mail already in use.\",\n        };\n      case \"auth/invalid-email\":\n        return {\n          error: \"Invalid e-mail address format.\",\n        };\n      case \"auth/weak-password\":\n        return {\n          error: \"Password is too weak.\",\n        };\n      case \"auth/too-many-requests\":\n        return {\n          error: \"Too many request. Try again in a minute.\",\n        };\n      default:\n        return {\n          error: \"Check your internet connection.\",\n        };\n    }\n  }\n};\n\nexport const loginUser = async ({ email, password }) => {\n  try {\n    await firebase.auth().signInWithEmailAndPassword(email, password);\n    return {};\n  } catch (error) {\n    switch (error.code) {\n      case \"auth/invalid-email\":\n        return {\n          error: \"Invalid email address format.\",\n        };\n      case \"auth/user-not-found\":\n      case \"auth/wrong-password\":\n        return {\n          error: \"Invalid email address or password.\",\n        };\n      case \"auth/too-many-requests\":\n        return {\n          error: \"Too many request. Try again in a minute.\",\n        };\n      default:\n        return {\n          error: \"Check your internet connection.\",\n        };\n    }\n  }\n};\n\nexport const sendEmailWithPassword = async (email) => {\n  try {\n    await firebase.auth().sendPasswordResetEmail(email);\n    return {};\n  } catch (error) {\n    switch (error.code) {\n      case \"auth/invalid-email\":\n        return {\n          error: \"Invalid email address format.\",\n        };\n      case \"auth/user-not-found\":\n        return {\n          error: \"User with this email does not exist.\",\n        };\n      case \"auth/too-many-requests\":\n        return {\n          error: \"Too many request. Try again in a minute.\",\n        };\n      default:\n        return {\n          error: \"Check your internet connection.\",\n        };\n    }\n  }\n};\n","import React from \"react\";\r\nimport { Input as SemanticInput } from \"semantic-ui-react\";\r\n\r\nconst Input = ({ errorText, ...props }) => (\r\n  <div>\r\n    <SemanticInput {...props} />\r\n    {errorText ? <p>{errorText}</p> : null}\r\n  </div>\r\n);\r\n\r\nexport default Input;\r\n","const Store = window.require(\"electron-store\");\r\n\r\nconst ColdStorage = new Store({\r\n  email: {\r\n    default: null,\r\n  },\r\n  password: {\r\n    default: null,\r\n  },\r\n});\r\n\r\nexport const getStorage = (type) => ColdStorage.get(type);\r\n\r\nexport const setStorage = (type, value) => ColdStorage.set(type, value);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Header, Button, Segment } from \"semantic-ui-react\";\r\nimport { emailValidator, passwordValidator } from \"../../core/utils\";\r\nimport { loginUser } from \"../../api/auth\";\r\nimport Input from \"../reusable/Input\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport { setStorage, getStorage } from \"../../core/coldStore\";\r\n\r\nconst history = createBrowserHistory({\r\n  basename: window.location.pathname,\r\n});\r\nconst Login = () => {\r\n  const [email, setEmail] = useState({ value: \"\", error: \"\" });\r\n  const [password, setPassword] = useState({ value: \"\", error: \"\" });\r\n  const [loading, setLoading] = useState(false);\r\n  const [setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (getStorage(\"email\") && getStorage(\"password\")) {\r\n      setEmail({ value: getStorage(\"email\"), error: \"\" });\r\n      setPassword({ value: getStorage(\"password\"), error: \"\" });\r\n    }\r\n  }, []);\r\n\r\n  const handleLogin = async () => {\r\n    const emailError = emailValidator(email.value);\r\n    const passwordError = passwordValidator(password.value);\r\n\r\n    if (emailError || passwordError) {\r\n      setEmail({ ...email, error: emailError });\r\n      setPassword({ ...password, error: passwordError });\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    const response = await loginUser({\r\n      email: email.value,\r\n      password: password.value,\r\n    }).catch((err) => {\r\n      //TODO: proper error handling\r\n      setError(err);\r\n      setLoading(false);\r\n    });\r\n\r\n    setStorage(\"email\", email.value);\r\n    setStorage(\"password\", password.value);\r\n\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <Segment>\r\n      <Header as=\"h2\" content=\"Login\" />\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Input\r\n              type=\"email\"\r\n              value={email.value}\r\n              placeholder=\"Email\"\r\n              onChange={(e, { value }) => setEmail({ value: value, error: \"\" })}\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Input\r\n              type=\"password\"\r\n              value={password.value}\r\n              placeholder=\"Password\"\r\n              onChange={(e, { value }) =>\r\n                setPassword({ value: value, error: \"\" })\r\n              }\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              loading={loading}\r\n              mode=\"contained\"\r\n              onClick={() => {\r\n                handleLogin();\r\n              }}\r\n            >\r\n              Login\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Header, Button, Segment } from \"semantic-ui-react\";\r\nimport { signInUser } from \"../../api/auth\";\r\nimport Input from \"../reusable/Input\";\r\nimport {\r\n  nameValidator,\r\n  emailValidator,\r\n  passwordValidator,\r\n} from \"../../core/utils\";\r\n\r\nconst Register = () => {\r\n  const [name, setName] = useState({ value: \"\", error: \"\" });\r\n  const [email, setEmail] = useState({ value: \"\", error: \"\" });\r\n  const [password, setPassword] = useState({ value: \"\", error: \"\" });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [setError] = useState(\"\");\r\n\r\n  const handleSignUp = async () => {\r\n    if (loading) return;\r\n\r\n    const nameError = nameValidator(name.value);\r\n    const emailError = emailValidator(email.value);\r\n    const passwordError = passwordValidator(password.value);\r\n\r\n    if (emailError || passwordError || nameError) {\r\n      setName({ ...name, error: nameError });\r\n      setEmail({ ...email, error: emailError });\r\n      setPassword({ ...password, error: passwordError });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    const response = await signInUser({\r\n      name: name.value,\r\n      email: email.value,\r\n      password: password.value,\r\n    });\r\n\r\n    if (response.error) {\r\n      setError(response.error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Segment>\r\n      <Header as=\"h2\" content=\"Register\" />\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"Name\"\r\n              onChange={(e, { value }) => setName({ value: value, error: \"\" })}\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"Email\"\r\n              onChange={(e, { value }) => setEmail({ value: value, error: \"\" })}\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"Password\"\r\n              onChange={(e, { value }) =>\r\n                setPassword({ value: value, error: \"\" })\r\n              }\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              loading={loading}\r\n              mode=\"contained\"\r\n              onClick={() => handleSignUp()}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport Login from \"./onboard/Login\";\r\nimport Register from \"./onboard/Register\";\r\n\r\nconst OnBoard = () => {\r\n  const [toggleLogin, setToggleLogin] = useState(false);\r\n  const [toggleRegister, setToggleRegister] = useState(false);\r\n\r\n  const handleLogin = () => {\r\n    if (toggleRegister) {\r\n      setToggleRegister(false);\r\n    }\r\n    return setToggleLogin(!toggleLogin);\r\n  };\r\n\r\n  const handleRegister = () => {\r\n    if (toggleLogin) {\r\n      setToggleLogin(false);\r\n    }\r\n    return setToggleRegister(!toggleRegister);\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <p id=\"title\">Noted</p>\r\n      <Grid.Column floated=\"right\" width={4}>\r\n        <Button\r\n          toggle\r\n          color=\"black\"\r\n          active={toggleLogin}\r\n          content=\"Login\"\r\n          onClick={() => handleLogin()}\r\n        />\r\n        <Button\r\n          toggle\r\n          color=\"black\"\r\n          active={toggleRegister}\r\n          content=\"Register\"\r\n          onClick={() => handleRegister()}\r\n        />\r\n      </Grid.Column>\r\n      <Grid.Row>\r\n        <Grid.Column width={16}>\r\n          {toggleRegister && <Register />}\r\n          {toggleLogin && <Login />}\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default OnBoard;\r\n","import React, { useContext } from \"react\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport { Segment } from \"semantic-ui-react\";\nimport AppContext from \"./context/appContext\";\nimport LabelButtons from \"./components/app/LabelButtons\";\n\nimport MainEvent from \"./components/MainEvent\";\nimport OnBoard from \"./components/OnBoard\";\n\nconst App = () => {\n  const state = useContext(AppContext);\n  const { loggedIn } = state;\n  const onboardColors = \"#E8ECFF\";\n  const mainColor = \"#FDD543\";\n\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <div className=\"App-background\">\n          <Segment\n            className=\"MainCard\"\n            inverted\n            style={{ backgroundColor: loggedIn ? mainColor : onboardColors }}\n          >\n            {loggedIn && <LabelButtons />}\n\n            <Switch>\n              <Route exact path=\"/\">\n                {loggedIn ? <MainEvent /> : <Redirect to=\"/login\" />}\n              </Route>\n              <Route path=\"/login\" component={OnBoard}>\n                {loggedIn ? <Redirect to=\"/\" /> : <OnBoard />}\n              </Route>\n            </Switch>\n          </Segment>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default (state, { type, payload }) => {\r\n  switch (type) {\r\n    case \"LOGGED_IN\":\r\n      return {\r\n        ...state,\r\n        loggedIn: true,\r\n        uid: payload.uid,\r\n      };\r\n\r\n    case \"NOT_LOGGED_IN\":\r\n      return {\r\n        ...state,\r\n        loggedIn: false,\r\n      };\r\n\r\n    case \"LOG_OUT\":\r\n      return {\r\n        ...state,\r\n        loggedIn: false,\r\n        uid: null,\r\n        notes: null,\r\n        notesLoaded: false,\r\n      };\r\n\r\n    case \"LOAD_NOTES\":\r\n      return {\r\n        ...state,\r\n        notes: payload,\r\n        notesLoaded: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer, useCallback, useEffect } from \"react\";\r\n\r\n//context\r\nimport AppContext from \"./appContext\";\r\nimport appReducer from \"./appReducer\";\r\n\r\n//firebase\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nimport { logoutUser } from \"../api/auth\";\r\nimport { getNotes } from \"../api/notes\";\r\n\r\nconst AppState = (props) => {\r\n  const initialState = {\r\n    loggedIn: null,\r\n    uid: null,\r\n    notes: null,\r\n    notesLoaded: false,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  const { loggedIn, uid, notesLoaded } = state;\r\n\r\n  const loadNotes = () =>\r\n    getNotes(uid).then((res) =>\r\n      dispatch({\r\n        type: \"LOAD_NOTES\",\r\n        payload: res.sort((a, b) => (a.nid < b.nid ? 1 : -1)),\r\n      })\r\n    );\r\n\r\n  const onNotes = useCallback(loadNotes, [uid]);\r\n\r\n  useEffect(() => {\r\n    authCheck();\r\n\r\n    if (!notesLoaded && loggedIn) {\r\n      onNotes();\r\n    }\r\n  }, [loggedIn, onNotes, notesLoaded]);\r\n\r\n  const authCheck = () =>\r\n    firebase.auth().onAuthStateChanged((user) =>\r\n      user\r\n        ? dispatch({\r\n            type: \"LOGGED_IN\",\r\n            payload: {\r\n              uid: user.uid,\r\n              username: firebase.auth().currentUser.displayName,\r\n            },\r\n          })\r\n        : dispatch({ type: \"NOT_LOGGED_IN\" })\r\n    );\r\n\r\n  const onLogout = () => {\r\n    logoutUser();\r\n    dispatch({ type: \"LOG_OUT\" });\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        uid: state.uid,\r\n        loggedIn: state.loggedIn,\r\n        notes: state.notes,\r\n        notesLoaded: state.notesLoaded,\r\n        loadNotes,\r\n        onLogout,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\nexport default AppState;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport AppState from \"./context/AppState\";\n\nReactDOM.render(\n  <AppState>\n    <App />\n  </AppState>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}